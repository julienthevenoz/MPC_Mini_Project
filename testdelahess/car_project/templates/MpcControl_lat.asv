classdef MpcControl_lat < MpcControlBase
    
    methods
        % Design a YALMIP optimizer object that takes a steady-state state
        % and input (xs, us) and returns a control input
        function ctrl_opti = setup_controller(mpc)
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % INPUTS
            %   x0           - initial state (estimate)
            %   x_ref, u_ref - reference state/input
            % OUTPUTS
            %   u0           - input to apply to the system
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            
            N_segs = ceil(mpc.H/mpc.Ts); % Horizon steps
            N = N_segs + 1;              % Last index in 1-based Matlab indexing

            [nx, nu] = size(mpc.B);
            
            % Targets
            x_ref = sdpvar(nx, 1);
            u_ref = sdpvar(nu, 1);

            % Initial states
            x0 = sdpvar(nx, 1);
            x0other = sdpvar(nx, 1); % (Ignore this, not used)

            % Input to apply to the system
            u0 = sdpvar(nu, 1);
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
            
            % NOTE: The matrices mpc.A, mpc.B, mpc.C and mpc.D
            %       are the DISCRETE-TIME MODEL of your system
            %       You can find the linearization steady-state
            %       in mpc.xs and mpc.us.
            
            % SET THE PROBLEM CONSTRAINTS con AND THE OBJECTIVE obj HERE

            obj = 0;
            con = [];
            x = sdpvar(2, N, 'full');
            u = sdpvar(1, N-1, 'full');

            A = mpc.A;
            B= mpc.B;

            F = [1, 0 ;
                0, 1 ; 
                -1, 0 ;
                0, -1];
            f = [3.5; 0.0873; 0.5; 0.0873];

            M = [1; -1];
            m = [0.5236 ; 0.5236];

            xs = mpc.xs;
            disp('xs =');
            disp(xs);
            us = mpc.us;
            disp('us =');
            disp(us);

            Q  = 10*eye(2);
            R = 1;

            [K, Qf, ~] = dlqr(A, B,Q, R);
            K = -K;

            h4=plot(polytope(F,f), 'b'); %blue
            hold on;


            % Compute maximal invariant set
            Xf = polytope([F;M*K],[f;m]);
            Acl = [A+B*K];
            
            h1=plot(Xf, 'c');
            hold on;
            i = 1;

            while 1
                prevXf = Xf;
                [T,t] = double(Xf);
                preXf = polytope(T*Acl,t);
                Xf = intersect(Xf, preXf);
                if isequal(prevXf, Xf)
                    break
                end
                if i == 10
                    break;
                end
                h2=plot(Xf, 'y'); 
	            fprintf('Iteration %i... not yet equal\n', i)

	            i = i + 1;
            end

            fprintf('Maximal invariant set computed after %i iterations\n\n', i);
            h3=plot(Xf,'g');
            legend([h4;h1;h3;h2],{'State constraints';'Xf initial';'Invariant set'});

            [Ff,ff] = double(Xf);

            x(:,1) = x0;
            u(:, 1) = u0;
            con = [con, x(:, 2) == A* (x(:, 1)) + B*(u(:,1))];
            con = [con, M*u(:,1) <= m];
            %obj = u(:,1)'*R*u(:,1);
            disp(check(con));
            for i = 2:N-1
                con = [con, x(:, i+1) == A* (x(:, i)) + B*(u(:,i))];
                con = [con, M*(u(:,i)) <= m];
                con = [con, F*x(:,i) <= f];
                obj = obj + (x(:,i) - x_ref)'*Q*(x(:,i) - x_ref) + (u(:,i) - u_ref)'*R*(u(:,i) - u_ref);
            end
            obj = obj + (x(:,N) - x_ref)'*Qf*(x(:,N) - x_ref);
            con = [con, Ff*x(:,i) <= ff];

            % Replace this line and set u0 to be the input that you
            % want applied to the system. Note that u0 is applied directly
            % to the nonlinear system. You need to take care of any 
            % offsets resulting from the linearization.
            % If you want to use the delta formulation make sure to
            % substract mpc.xs/mpc.us accordingly.
            %con = con + ( u0 == 0 );
            %con = con + ( u0 == u(:,1) );


            % Pass here YALMIP sdpvars which you want to debug. You can
            % then access them when calling your mpc controller like
            % [u, X, U] = mpc_lat.get_u(x0, ref);
            % with debugVars = {X_var, U_var};
            debugVars = {x, u};
            
            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            
            % Return YALMIP optimizer object
            ctrl_opti = optimizer(con, obj, sdpsettings('solver','gurobi'), ...
                {x0, x_ref, u_ref, x0other}, {u0, debugVars{:}});
        end
        
        % Computes the steady state target which is passed to the
        % controller
        function [xs_ref, us_ref] = compute_steady_state_target(mpc, ref)

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % INPUTS
            %   ref    - reference to track
            % OUTPUTS
            %   xs_ref, us_ref - steady-state target
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            % Steady-state system
            A = mpc.A;
            B = mpc.B;

            % Linearization steady-state
            xs = mpc.xs;
            us = mpc.us;
            disp('ref merde');
            disp(ref);
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
            xs_ref = [ref; 0];
            us_ref = ((1-A(1,1))*(xs_ref(1)-xs(1))-A(1,2)*(xs_ref(2)-xs(2)))/B(1) + us;
            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        end
    end
end
